<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.processmining.dao.NormLogToEventLogMapper" >
  <resultMap id="BaseResultMap" type="com.processmining.entity.NormLogToEventLog" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="normalizedLogId" property="normalizedlogid" jdbcType="INTEGER" />
    <result column="eventLogId" property="eventlogid" jdbcType="INTEGER" />
    <result column="normalizedLogName" property="normalizedlogname" jdbcType="VARCHAR" />
    <result column="eventLogName" property="eventlogname" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, normalizedLogId, eventLogId, normalizedLogName, eventLogName
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from normalizedlog__eventlog
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectByNormLogId" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from normalizedlog__eventlog
    where normalizedLogId = #{normLogId,jdbcType=INTEGER}
  </select>
  <select id="selectByEventLogId" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from normalizedlog__eventlog
    where eventLogId = #{eventLogId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from normalizedlog__eventlog
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.processmining.entity.NormLogToEventLog" >
    insert into normalizedlog__eventlog (id, normalizedLogId, eventLogId, 
      normalizedLogName, eventLogName)
    values (#{id,jdbcType=INTEGER}, #{normalizedlogid,jdbcType=INTEGER}, #{eventlogid,jdbcType=INTEGER}, 
      #{normalizedlogname,jdbcType=VARCHAR}, #{eventlogname,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.processmining.entity.NormLogToEventLog" >
    insert into normalizedlog__eventlog
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="normalizedlogid != null" >
        normalizedLogId,
      </if>
      <if test="eventlogid != null" >
        eventLogId,
      </if>
      <if test="normalizedlogname != null" >
        normalizedLogName,
      </if>
      <if test="eventlogname != null" >
        eventLogName,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="normalizedlogid != null" >
        #{normalizedlogid,jdbcType=INTEGER},
      </if>
      <if test="eventlogid != null" >
        #{eventlogid,jdbcType=INTEGER},
      </if>
      <if test="normalizedlogname != null" >
        #{normalizedlogname,jdbcType=VARCHAR},
      </if>
      <if test="eventlogname != null" >
        #{eventlogname,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.processmining.entity.NormLogToEventLog" >
    update normalizedlog__eventlog
    <set >
      <if test="normalizedlogid != null" >
        normalizedLogId = #{normalizedlogid,jdbcType=INTEGER},
      </if>
      <if test="eventlogid != null" >
        eventLogId = #{eventlogid,jdbcType=INTEGER},
      </if>
      <if test="normalizedlogname != null" >
        normalizedLogName = #{normalizedlogname,jdbcType=VARCHAR},
      </if>
      <if test="eventlogname != null" >
        eventLogName = #{eventlogname,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.processmining.entity.NormLogToEventLog" >
    update normalizedlog__eventlog
    set normalizedLogId = #{normalizedlogid,jdbcType=INTEGER},
      eventLogId = #{eventlogid,jdbcType=INTEGER},
      normalizedLogName = #{normalizedlogname,jdbcType=VARCHAR},
      eventLogName = #{eventlogname,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>